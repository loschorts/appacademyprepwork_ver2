{"filter":false,"title":"05_my_hash_set.rb","tooltip":"/week1/day4/exercises 4/lib/05_my_hash_set.rb","ace":{"folds":[],"scrolltop":156,"scrollleft":12,"selection":{"start":{"row":19,"column":29},"end":{"row":19,"column":29},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":8,"state":"start","mode":"ace/mode/ruby"}},"hash":"1d7bee42339fbec0a529d74be3534223b350c4b4","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":79,"column":41},"end":{"row":79,"column":42},"action":"insert","lines":["="],"id":1156}],[{"start":{"row":79,"column":60},"end":{"row":80,"column":0},"action":"insert","lines":["",""],"id":1157},{"start":{"row":80,"column":0},"end":{"row":80,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":80,"column":4},"end":{"row":80,"column":5},"action":"insert","lines":["r"],"id":1158}],[{"start":{"row":80,"column":5},"end":{"row":80,"column":6},"action":"insert","lines":["e"],"id":1159}],[{"start":{"row":80,"column":6},"end":{"row":80,"column":7},"action":"insert","lines":["t"],"id":1160}],[{"start":{"row":80,"column":7},"end":{"row":80,"column":8},"action":"insert","lines":["r"],"id":1161}],[{"start":{"row":80,"column":8},"end":{"row":80,"column":9},"action":"insert","lines":["u"],"id":1162}],[{"start":{"row":80,"column":8},"end":{"row":80,"column":9},"action":"remove","lines":["u"],"id":1163}],[{"start":{"row":80,"column":7},"end":{"row":80,"column":8},"action":"remove","lines":["r"],"id":1164}],[{"start":{"row":80,"column":7},"end":{"row":80,"column":8},"action":"insert","lines":["u"],"id":1165}],[{"start":{"row":80,"column":8},"end":{"row":80,"column":9},"action":"insert","lines":["r"],"id":1166}],[{"start":{"row":80,"column":9},"end":{"row":80,"column":10},"action":"insert","lines":["n"],"id":1167}],[{"start":{"row":80,"column":10},"end":{"row":80,"column":11},"action":"insert","lines":[" "],"id":1168}],[{"start":{"row":80,"column":11},"end":{"row":80,"column":12},"action":"insert","lines":["f"],"id":1169}],[{"start":{"row":80,"column":12},"end":{"row":80,"column":13},"action":"insert","lines":["a"],"id":1170}],[{"start":{"row":80,"column":13},"end":{"row":80,"column":14},"action":"insert","lines":["l"],"id":1171}],[{"start":{"row":80,"column":14},"end":{"row":80,"column":15},"action":"insert","lines":["s"],"id":1172}],[{"start":{"row":80,"column":15},"end":{"row":80,"column":16},"action":"insert","lines":["e"],"id":1173}],[{"start":{"row":80,"column":16},"end":{"row":80,"column":17},"action":"insert","lines":[" "],"id":1174}],[{"start":{"row":80,"column":17},"end":{"row":80,"column":18},"action":"insert","lines":["i"],"id":1175}],[{"start":{"row":80,"column":18},"end":{"row":80,"column":19},"action":"insert","lines":["f"],"id":1176}],[{"start":{"row":80,"column":19},"end":{"row":80,"column":20},"action":"insert","lines":[" "],"id":1177}],[{"start":{"row":79,"column":43},"end":{"row":79,"column":47},"action":"remove","lines":["set1"],"id":1178},{"start":{"row":79,"column":43},"end":{"row":79,"column":44},"action":"insert","lines":["s"]}],[{"start":{"row":79,"column":44},"end":{"row":79,"column":45},"action":"insert","lines":["e"],"id":1179}],[{"start":{"row":79,"column":45},"end":{"row":79,"column":46},"action":"insert","lines":["l"],"id":1180}],[{"start":{"row":79,"column":46},"end":{"row":79,"column":47},"action":"insert","lines":["f"],"id":1181}],[{"start":{"row":80,"column":20},"end":{"row":80,"column":21},"action":"insert","lines":["s"],"id":1182}],[{"start":{"row":80,"column":21},"end":{"row":80,"column":22},"action":"insert","lines":["e"],"id":1183}],[{"start":{"row":80,"column":22},"end":{"row":80,"column":23},"action":"insert","lines":["l"],"id":1184}],[{"start":{"row":80,"column":23},"end":{"row":80,"column":24},"action":"insert","lines":["f"],"id":1185}],[{"start":{"row":80,"column":24},"end":{"row":80,"column":25},"action":"insert","lines":["."],"id":1186}],[{"start":{"row":80,"column":25},"end":{"row":80,"column":26},"action":"insert","lines":["s"],"id":1187}],[{"start":{"row":80,"column":26},"end":{"row":80,"column":27},"action":"insert","lines":["y"],"id":1188}],[{"start":{"row":80,"column":27},"end":{"row":80,"column":28},"action":"insert","lines":["m"],"id":1189}],[{"start":{"row":80,"column":28},"end":{"row":80,"column":29},"action":"insert","lines":["m"],"id":1190}],[{"start":{"row":80,"column":29},"end":{"row":80,"column":30},"action":"insert","lines":["e"],"id":1191}],[{"start":{"row":80,"column":30},"end":{"row":80,"column":31},"action":"insert","lines":["t"],"id":1192}],[{"start":{"row":80,"column":31},"end":{"row":80,"column":32},"action":"insert","lines":["r"],"id":1193}],[{"start":{"row":80,"column":32},"end":{"row":80,"column":33},"action":"insert","lines":["i"],"id":1194}],[{"start":{"row":80,"column":33},"end":{"row":80,"column":34},"action":"insert","lines":["c"],"id":1195}],[{"start":{"row":80,"column":34},"end":{"row":80,"column":35},"action":"insert","lines":["_"],"id":1196}],[{"start":{"row":80,"column":35},"end":{"row":80,"column":36},"action":"insert","lines":["d"],"id":1197}],[{"start":{"row":80,"column":36},"end":{"row":80,"column":37},"action":"insert","lines":["i"],"id":1198}],[{"start":{"row":80,"column":37},"end":{"row":80,"column":38},"action":"insert","lines":["f"],"id":1199}],[{"start":{"row":80,"column":38},"end":{"row":80,"column":39},"action":"insert","lines":["f"],"id":1200}],[{"start":{"row":80,"column":39},"end":{"row":80,"column":40},"action":"insert","lines":["e"],"id":1201}],[{"start":{"row":80,"column":40},"end":{"row":80,"column":41},"action":"insert","lines":["r"],"id":1202}],[{"start":{"row":80,"column":41},"end":{"row":80,"column":42},"action":"insert","lines":["e"],"id":1203}],[{"start":{"row":80,"column":42},"end":{"row":80,"column":43},"action":"insert","lines":["n"],"id":1204}],[{"start":{"row":80,"column":43},"end":{"row":80,"column":44},"action":"insert","lines":["c"],"id":1205}],[{"start":{"row":80,"column":44},"end":{"row":80,"column":45},"action":"insert","lines":["e"],"id":1206}],[{"start":{"row":80,"column":45},"end":{"row":80,"column":47},"action":"insert","lines":["()"],"id":1207}],[{"start":{"row":80,"column":46},"end":{"row":80,"column":47},"action":"insert","lines":["o"],"id":1208}],[{"start":{"row":80,"column":47},"end":{"row":80,"column":48},"action":"insert","lines":["b"],"id":1209}],[{"start":{"row":80,"column":48},"end":{"row":80,"column":49},"action":"insert","lines":["j"],"id":1210}],[{"start":{"row":80,"column":49},"end":{"row":80,"column":50},"action":"insert","lines":["e"],"id":1211}],[{"start":{"row":80,"column":50},"end":{"row":80,"column":51},"action":"insert","lines":["c"],"id":1212}],[{"start":{"row":80,"column":51},"end":{"row":80,"column":52},"action":"insert","lines":["t"],"id":1213}],[{"start":{"row":80,"column":53},"end":{"row":80,"column":54},"action":"insert","lines":["."],"id":1214}],[{"start":{"row":80,"column":54},"end":{"row":80,"column":55},"action":"insert","lines":["s"],"id":1215}],[{"start":{"row":80,"column":55},"end":{"row":80,"column":56},"action":"insert","lines":["t"],"id":1216}],[{"start":{"row":80,"column":56},"end":{"row":80,"column":57},"action":"insert","lines":["o"],"id":1217}],[{"start":{"row":80,"column":57},"end":{"row":80,"column":58},"action":"insert","lines":["r"],"id":1218}],[{"start":{"row":80,"column":58},"end":{"row":80,"column":59},"action":"insert","lines":["e"],"id":1219}],[{"start":{"row":80,"column":59},"end":{"row":80,"column":60},"action":"insert","lines":[" "],"id":1220}],[{"start":{"row":80,"column":60},"end":{"row":80,"column":61},"action":"insert","lines":["!"],"id":1221}],[{"start":{"row":80,"column":61},"end":{"row":80,"column":62},"action":"insert","lines":["="],"id":1222}],[{"start":{"row":80,"column":62},"end":{"row":80,"column":63},"action":"insert","lines":[" "],"id":1223}],[{"start":{"row":80,"column":63},"end":{"row":80,"column":64},"action":"insert","lines":["n"],"id":1224}],[{"start":{"row":80,"column":64},"end":{"row":80,"column":65},"action":"insert","lines":["i"],"id":1225}],[{"start":{"row":80,"column":65},"end":{"row":80,"column":66},"action":"insert","lines":["l"],"id":1226}],[{"start":{"row":80,"column":65},"end":{"row":80,"column":66},"action":"remove","lines":["l"],"id":1227}],[{"start":{"row":80,"column":64},"end":{"row":80,"column":65},"action":"remove","lines":["i"],"id":1228}],[{"start":{"row":80,"column":63},"end":{"row":80,"column":64},"action":"remove","lines":["n"],"id":1229}],[{"start":{"row":80,"column":62},"end":{"row":80,"column":63},"action":"remove","lines":[" "],"id":1230}],[{"start":{"row":80,"column":61},"end":{"row":80,"column":62},"action":"remove","lines":["="],"id":1231}],[{"start":{"row":80,"column":60},"end":{"row":80,"column":61},"action":"remove","lines":["!"],"id":1232}],[{"start":{"row":80,"column":59},"end":{"row":80,"column":60},"action":"remove","lines":[" "],"id":1233}],[{"start":{"row":80,"column":59},"end":{"row":80,"column":60},"action":"insert","lines":["."],"id":1234}],[{"start":{"row":80,"column":60},"end":{"row":80,"column":61},"action":"insert","lines":["n"],"id":1235}],[{"start":{"row":80,"column":60},"end":{"row":80,"column":61},"action":"remove","lines":["n"],"id":1236}],[{"start":{"row":80,"column":60},"end":{"row":80,"column":61},"action":"insert","lines":["n"],"id":1237}],[{"start":{"row":80,"column":61},"end":{"row":80,"column":62},"action":"insert","lines":["i"],"id":1238}],[{"start":{"row":80,"column":62},"end":{"row":80,"column":63},"action":"insert","lines":["l"],"id":1239}],[{"start":{"row":80,"column":63},"end":{"row":80,"column":64},"action":"insert","lines":["?"],"id":1240}],[{"start":{"row":80,"column":17},"end":{"row":80,"column":19},"action":"remove","lines":["if"],"id":1241},{"start":{"row":80,"column":17},"end":{"row":80,"column":18},"action":"insert","lines":["u"]}],[{"start":{"row":80,"column":18},"end":{"row":80,"column":19},"action":"insert","lines":["n"],"id":1242}],[{"start":{"row":80,"column":19},"end":{"row":80,"column":20},"action":"insert","lines":["l"],"id":1243}],[{"start":{"row":80,"column":20},"end":{"row":80,"column":21},"action":"insert","lines":["e"],"id":1244}],[{"start":{"row":80,"column":21},"end":{"row":80,"column":22},"action":"insert","lines":["s"],"id":1245}],[{"start":{"row":80,"column":22},"end":{"row":80,"column":23},"action":"insert","lines":["s"],"id":1246}],[{"start":{"row":80,"column":68},"end":{"row":81,"column":0},"action":"insert","lines":["",""],"id":1247},{"start":{"row":81,"column":0},"end":{"row":81,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":81,"column":4},"end":{"row":81,"column":5},"action":"insert","lines":["t"],"id":1248}],[{"start":{"row":81,"column":5},"end":{"row":81,"column":6},"action":"insert","lines":["r"],"id":1249}],[{"start":{"row":81,"column":6},"end":{"row":81,"column":7},"action":"insert","lines":["u"],"id":1250}],[{"start":{"row":81,"column":7},"end":{"row":81,"column":8},"action":"insert","lines":["e"],"id":1251}],[{"start":{"row":81,"column":8},"end":{"row":82,"column":0},"action":"insert","lines":["",""],"id":1252},{"start":{"row":82,"column":0},"end":{"row":82,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":82,"column":4},"end":{"row":82,"column":5},"action":"insert","lines":["e"],"id":1253}],[{"start":{"row":82,"column":5},"end":{"row":82,"column":6},"action":"insert","lines":["n"],"id":1254}],[{"start":{"row":82,"column":6},"end":{"row":82,"column":7},"action":"insert","lines":["d"],"id":1255},{"start":{"row":82,"column":2},"end":{"row":82,"column":4},"action":"remove","lines":["  "]}],[{"start":{"row":0,"column":0},"end":{"row":85,"column":0},"action":"remove","lines":["# MyHashSet","#","# Ruby provides a class named `Set`. A set is an unordered collection of","# values with no duplicates.  You can read all about it in the documentation:","#","# http://www.ruby-doc.org/stdlib-2.1.2/libdoc/set/rdoc/Set.html","#","# Let's write a class named `MyHashSet` that will implement some of the","# functionality of a set. Our `MyHashSet` class will utilize a Ruby hash to keep","# track of which elements are in the set.  Feel free to use any of the Ruby","# `Hash` methods within your `MyHashSet` methods.","#","# Write a `MyHashSet#initialize` method which sets an empty hash object to","# `@store`. Next, write an `#insert(el)` method that stores `el` as a key","# in `@store`, storing `true` as the value. Write an `#include?(el)`","# method that sees if `el` has previously been `insert`ed by checking the","# `@store`; return `true` or `false`.","#","# Next, write a `#delete(el)` method to remove an item from the set.","# Return `true` if the item had been in the set, else return `false`.  Add","# a method `#to_a` which returns an array of the items in the set.","#","# Next, write a method `set1#union(set2)` which returns a new set which","# includes all the elements in `set1` or `set2` (or both). Write a","# `set1#intersect(set2)` method that returns a new set which includes only","# those elements that are in both `set1` and `set2`.","#","# Write a `set1#minus(set2)` method which returns a new set which includes","# all the items of `set1` that aren't in `set2`.","","class MyHashSet","  attr_reader :store","  def initialize store = {}","    @store = store","  end","  ","  def insert el","    @store[el] = true","  end","  ","  def include? el","    @store.include? el","  end","  ","  def delete el","    @store.delete(el) {|el| false}","  end","  ","  def to_a","    @store.keys","  end","  ","  def union(set2)","    MyHashSet.new(@store.merge(set2.store))","  end","  ","  def intersect(set2)","    MyHashSet.new(@store.select {|k,v| set2.include?(k)})","  end","  ","  def minus(set2)","    MyHashSet.new(@store.select {|k,v| !set2.include?(k)})","  end","","# Bonus","#","# - Write a `set1#symmetric_difference(set2)` method; it should return the","#   elements contained in either `set1` or `set2`, but not both!","  def symmetric_difference(set2) ","    my_union = self.union(set2)","    my_int = self.intersect(set2)","    my_union.minus(my_int)","  end","","# - Write a `set1#==(object)` method. It should return true if `object` is","#   a `MyHashSet`, has the same size as `set1`, and every member of","#   `object` is a member of `set1`.","  def ==(object)","    return false if object.class != MyHashSet","    return false if object.store.length == self.store.length","    return false unless self.symmetric_difference(object).store.nil?","    true","  end","","end",""],"id":1256},{"start":{"row":0,"column":0},"end":{"row":87,"column":0},"action":"insert","lines":["# MyHashSet","#","# Ruby provides a class named `Set`. A set is an unordered collection of","# values with no duplicates.  You can read all about it in the documentation:","#","# http://www.ruby-doc.org/stdlib-2.1.2/libdoc/set/rdoc/Set.html","#","# Let's write a class named `MyHashSet` that will implement some of the","# functionality of a set. Our `MyHashSet` class will utilize a Ruby hash to keep","# track of which elements are in the set.  Feel free to use any of the Ruby","# `Hash` methods within your `MyHashSet` methods.","#","# Write a `MyHashSet#initialize` method which sets an empty hash object to","# `@store`. Next, write an `#insert(el)` method that stores `el` as a key","# in `@store`, storing `true` as the value. Write an `#include?(el)`","# method that sees if `el` has previously been `insert`ed by checking the","# `@store`; return `true` or `false`.","#","# Next, write a `#delete(el)` method to remove an item from the set.","# Return `true` if the item had been in the set, else return `false`.  Add","# a method `#to_a` which returns an array of the items in the set.","#","# Next, write a method `set1#union(set2)` which returns a new set which","# includes all the elements in `set1` or `set2` (or both). Write a","# `set1#intersect(set2)` method that returns a new set which includes only","# those elements that are in both `set1` and `set2`.","#","# Write a `set1#minus(set2)` method which returns a new set which includes","# all the items of `set1` that aren't in `set2`.","","class MyHashSet","  attr_reader :store","  def initialize store = {}","    @store = store","  end","  ","  def insert el","    @store[el] = true","  end","  ","  def include? el","    @store.include? el","  end","  ","  def delete el","    @store.delete(el) {|el| false}","  end","  ","  def to_a","    @store.keys","  end","  ","  def union(set2)","    MyHashSet.new(@store.merge(set2.store))","  end","  ","  def intersect(set2)","    MyHashSet.new(@store.select {|k,v| set2.include?(k)})","  end","  ","  def minus(set2)","    MyHashSet.new(@store.select {|k,v| !set2.include?(k)})","  end","","# Bonus","#","# - Write a `set1#symmetric_difference(set2)` method; it should return the","#   elements contained in either `set1` or `set2`, but not both!","  def symmetric_difference(set2) ","    my_union = self.union(set2)","    my_int = self.intersect(set2)","    my_union.minus(my_int)","  end","","# - Write a `set1#==(object)` method. It should return true if `object` is","#   a `MyHashSet`, has the same size as `set1`, and every member of","#   `object` is a member of `set1`.","  def ==(object)","    return false if object.class != MyHashSet","    return false unless object.store.length == self.store.length","    return false unless self.symmetric_difference(object).store.empty?","    true","  end","","end","","",""]}]]},"timestamp":1443388980000}